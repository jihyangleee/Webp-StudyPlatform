<!DOCTYPE html>
<html lang="ko">

<head>
  <div class="notification-wrapper">
  <span id="notification-bell">🔔</span>
  <span id="notification-count" class="badge" style="display: none;"></span>
  <div id="notification-list" class="notification-dropdown" style="display: none;"></div>
  </div>
  <meta charset="UTF-8" />
  <title>SPARK - MYPAGE</title>
  <link rel="stylesheet" href="/stylesheets/myapage.css">
  <link rel="icon" href="/favicon.png" type="image/png">
  <!--  FullCalendar CSS -->
  <link href='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/main.min.css' rel='stylesheet' />

  <!--  FullCalendar JS (global 버전) -->
  <script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js'></script>
  <script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/locales-all.global.min.js'></script>
  <script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/google-calendar.global.min.js'></script>

  <link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="/stylesheets/calendar.css" />
</head>

<body>
 <!-- ajax 구현 -->
<script>
  async function loadNotifications() {
    const res = await fetch('/studyR/notifications');
    const data = await res.json();

    // 읽지 않은 알림 수 표시
    const count = data.notifications.filter(n => !n.read).length;
    const badge = document.getElementById('notification-count');
    badge.textContent = count;
    badge.style.display = count > 0 ? 'inline-block' : 'none';

    // 알림 리스트 렌더링
    const list = document.getElementById('notification-list');
    list.innerHTML = data.notifications.map(n => `
      <div style="padding: 8px; border-bottom: 1px solid #ddd;">
        <div>
          ${n.message}
          <br>
          <small>${new Date(n.timestamp).toLocaleString()}</small>
          ${n.read ? '<span style="color:gray;">[읽음]</span>' : '<span style="color:red;">[안읽음]</span>'}
        </div>
        <div style="margin-top:4px;">
          ${!n.read ? `<button onclick="markAsRead('${n.timestamp}')">읽음</button>` : ''}
          <button onclick="deleteNoti('${n.timestamp}')">삭제</button>
        </div>
      </div>
    `).join('');
  }

  async function markAsRead(timestamp) {
    await fetch(`/studyR/notifications/${timestamp}/read`, { method: 'POST' });
    loadNotifications();
  }

  async function deleteNoti(timestamp) {
    await fetch(`/studyR/notifications/${timestamp}/delete`, { method: 'POST' });
    loadNotifications();
  }

  document.getElementById('notification-bell').addEventListener('click', () => {
    const list = document.getElementById('notification-list');
    list.style.display = list.style.display === 'none' ? 'block' : 'none';
  });

  // 최초 실행 및 주기적 갱신
  loadNotifications();
  setInterval(loadNotifications, 5000);
</script>

  <header class="header">
    <div class="logo">
      <img src="/favicon.png" alt="로고" class="favicon">
      <h1>MYPAGE</h1>
    </div>
    <nav class="nav">
      <a href="/studyR/webP">MAIN</a>
      <a href="/login">LOGOUT</a>
    </nav>
  </header>
  <main class="mypage-container">
    <section class="profile-box">
      <p class="profile-label">profile</p>
      <div class="profile-content">
        <div class="profile-img" id="profile-img"></div>
        <div class="profile-text">
          <p id="username">이름</p>
          <p id="email">@seoultech.ac.kr</p>
        </div>
      </div>
    </section>

    <section class="study-box">
      <p class="study-label">MY STUDY</p>
      <div class="filter-buttons">


        <a href="/studyR/mypage?filter=soon">마감 임박</a>
        <a href="/studyR/mypage?filter=approved">합격</a>
        <a href="/studyR/mypage?filter=pending">승인 대기</a>
      </div>
      </div>
      <!-- 내가 만든 스터디 목록 -->
      <ul class="study-list my-study-list">
        <% studies.forEach(study=> { %>
          <li class="study-item">
            <strong>
              <%= study.title %>
            </strong><br>
            <div class="button-group">
              <!-- 스터디 개별 삭제 버튼 (✔ 클래스 명확화) -->
              <button type="button" class="study-button btn-delete-study" data-study-id="<%= study.id %>">삭제</button>
              <a href="/studyR/studies/edit/<%= study.id %>" class="study-button edit-button">수정</a>
              <a href="/studyR/studies/manage/<%= study.id %>" class="study-button manage-button">지원자 관리</a>
            </div>
          </li>
          <% }) %>
      </ul>

      <!-- 스터디 등록 버튼 -->
      <a class="new-study-btn" id="toStudyWrite">새로운 스터디 만들기</a>
    </section>

    <hr>

    <!-- 내가 지원한 스터디 목록 -->
    <section class="study-box">
      <form id="form-delete-applications">
        <!-- 지원서 선택 삭제 -->
        <button type="submit" class="study-button btn-delete-selected-applications">선택 삭제</button>

        <p class="study-label">지원한 스터디 목록</p>

        <!-- 합격 -->
        <h3>합격:</h3>
        <ul class="study-list applied-list-pass">
          <% ongoing.forEach(app=> { %>
            <li class="study-item">
              <input type="checkbox" class="checkbox-delete-application" data-study-id="<%= app.studyId %>">
              <strong>
                <%= app.studyTitle %>
              </strong><br>
              상태: <%= app.status %><br>
            </li>
            <% }) %>
        </ul>

    <!-- 대기 중 / 불합격 -->
    <h3>대기 중 / 불합격:</h3>
    <ul class="study-list applied-list-pending">
      <% pending.forEach(app => { %>
        <li class="study-item">
          <input type="checkbox" class="checkbox-delete-application" data-study-id="<%= app.studyId %>">
          <strong><%= app.studyTitle %></strong><br>
          상태: <%= app.status || "대기 중" %><br>
        </li>
      <% }) %>
    </ul>
  </form>
</section>
</main>
<h1>내 구글 캘린더 보기</h1>
<a href="/calendarR/auth/google">📅 Google 로그인</a>
<button id="load-events-btn">📅 일정 불러오기</button>
<div id="calendar"></div>
  <script>document.addEventListener('DOMContentLoaded', function () {
  const calendarEl = document.getElementById('calendar');

  const calendar = new FullCalendar.Calendar(calendarEl, {
    initialView: 'dayGridMonth',
    selectable: true,
    locale: 'ko',
    eventSources: [], // 처음에는 비워둠

    select: async function (info) {
      const title = prompt('일정 제목을 입력하세요');
      if (!title) return;

          const startTime = prompt('시작 시간 (예: 09:00)', '09:00');
          if (!startTime) return;

          const endTime = prompt('종료 시간 (예: 10:00)', '10:00');
          if (!endTime) return;

          const start = new Date(info.dateStr + 'T' + startTime + ':00+09:00').toISOString();
          const end = new Date(info.dateStr + 'T' + endTime + ':00+09:00').toISOString();

          calendar.addEvent({
            title,
            start,
            end,
            allDay: false
          });

          fetch('/calendarR/add-google-event', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ title, start, end })
          })
            .then(res => res.text())
            .then(msg => alert(msg));
        }
      });

      calendar.render();

      // 일정 불러오기 버튼
      document.getElementById('load-events-btn').addEventListener('click', () => {
        calendar.addEventSource({
          url: '/calendarR/list-google-events',
          method: 'GET',
          failure: function () {
            alert('일정 불러오기 실패');
          }
        });
      });
    });
  </script>

  <script>
    document.addEventListener('DOMContentLoaded', () => {

      // 1. 스터디 개별 삭제
      document.addEventListener('click', async e => {
        const btn = e.target.closest('.btn-delete-study');
        if (!btn) return;

        const id = btn.dataset.studyId;
        if (!id) {
          alert('스터디 ID가 없습니다.');
          return;
        }

        try {
          const res = await fetch(`/studyR/studies/delete/${id}`, {
            method: 'POST'
          });

          if (!res.ok) {
            const text = await res.text();
            throw new Error(text);
          }

          const result = await res.json();
          if (result.redirect) {
            location.href = result.redirect;
          } else {
            alert('삭제 실패');
          }
        } catch (err) {
          console.error('스터디 삭제 실패:', err);
          alert('삭제 중 오류 발생');
        }
      });

      // 2. 지원서 선택 삭제
      const form = document.getElementById('form-delete-applications');
      form.addEventListener('submit', async e => {
        e.preventDefault();

        const checked = [...document.querySelectorAll('.checkbox-delete-application:checked')];
        if (checked.length === 0) return alert('삭제할 항목을 선택하세요.');
        if (!confirm('선택한 항목을 삭제하시겠습니까?')) return;

        const studyIds = checked.map(cb => cb.dataset.studyId);

        try {
          const res = await fetch('/studyR/applications/delete-bulk', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ studyIds })
          });

          if (res.ok) {
            location.reload();
          } else {
            alert('지원서 삭제 실패');
          }
        } catch (err) {
          console.error('지원서 삭제 실패:', err);
          alert('삭제 중 오류 발생');
        }
      });

      // 3. 새로운 스터디 등록 페이지로 이동
      document.getElementById('toStudyWrite').addEventListener('click', () => {
        window.location.href = '/studyR/studies/new';
      });

    });
  </script>




</body>

</html>